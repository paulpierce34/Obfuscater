## Take in a huge ass string, chop it into different chunked character arrays every 10 characters, and then re-combine at the end into a cohesive script with '+' to add them all together one by one

## Next task is to figure out how to combine all these separate variables and the '+' signs into one cohesive command or expression that can be invoked

#$Stringtest = "hello1 world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo middle hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo hello world this is a test string subsection yolo end"

$Stringtest = "get-childitem C:\Users\xx\Documents"


$Allstrings = $Stringtest.tochararray()

$Allvariables = @("a", "b", "c","d", "e", "f","g", "h", "j","k", "l", "m","n", "o", "p","q", "r", "s","t", "u", "v","w", "x", "y","z", "AB", "CD", "EF","GH", "IJ", "KL","MN", "OP", "QR","ST", "UV", "WX","YZ", "UV", "WX","YZ")

$Count = 0

$NewVarArray = @()

## use get-random 

$Stringlength = $Stringtest.Length


## Now we will try to create a separate array for every 5 characters
for ($i = 0; $i -lt $Stringtest.Length; $i += 1){

## Create random variable names
$Varname = $AllVariables | Get-Random -count 3 ## Create random variable names
$Newvarname = ($Varname -join '').Trim() ## join into one line and remove whitespaces
#write-host -foregroundcolor yellow $Newvarname




## This part is strictly for capturing the first few characters as well - Section 1
if ($Count -eq 0){
$Newvararray += $NewVarName
$newstring = $Stringtest.Substring($Count, 5)
$Fullarray += "$"
$Fullarray += "$Newvarname="
$Fullarray += "'"
$Fullarray += $newstring
$Fullarray += "'"
$Fullarray += ";"
write-host "Section 1....  $newstring"
}



$Count += 1



## Majority of script happens here - Section 2
if ($Count % 5 -eq 0 -and $Count -ne $Stringlength){

$Newvararray += $NewVarName

try {
$newstring = $Stringtest.Substring($Count, 5)
}
catch {continue} #write-error "String length is $Stringlength, we are at index $Count and we are trying to create a 5 character substring, which causes an error."}








$Fullarray += "$"
$Fullarray += "$Newvarname="
$Fullarray += "'"
$Fullarray += $newstring
$Fullarray += "'"
$Fullarray += ";"

write-host "Section 2....  $newstring"

}

###

# String length: 24
if ($Count -eq ($Stringtest.Length -4)){
try {$newstring = $Stringtest.Substring($FInalLength, 4)}
catch {continue}
}

# String length: 23
if ($Count -eq ($Stringtest.Length -3)){
try {$newstring = $Stringtest.Substring($FInalLength, 3)}
catch {continue}
}

# String length: 22
if ($Count -eq ($Stringtest.Length -2)){
try {$newstring = $Stringtest.Substring($FInalLength, 2)}
catch {continue}
}

# String length: 21
if ($Count -eq ($Stringtest.Length -1)){
try {$newstring = $Stringtest.Substring($FInalLength, 1)}
catch {continue}
}

###



# Section 3
if ($Count -eq $Stringtest.Length){
write-host "Section 3....  $newstring"
$FinalLength = $Stringtest.Length -1
$Newvararray += $NewVarName
$newstring = $Stringtest.Substring($FInalLength, 1)
$Fullarray += "$"
$Fullarray += "$Newvarname="
$Fullarray += "'"
$Fullarray += $newstring
$Fullarray += "'"
$Fullarray += ";"# Previously was +

write-host "Section 3....  $newstring"
break

}



} ## end for loop


## Essentially the END block of script
$newarray = $Fullarray -replace "\+$", "" ## replace the final '+' sign with nothing
$Count = 0
Invoke-Expression $newarray

$Allvars = $newvararray -replace "^", "$" ## Get all variables into one single array

$SecondAllVars = $Allvars -replace "$", "+" -join ""
$ThirdAllvars = $SecondallVars -replace "\+$", ""

## Combine all the text
$Finalvariable = Invoke-expression $Thirdallvars

## Actually call the command
Invoke-expression $Finalvariable


write-host $FinalVariable
write-host "finished"


$newarray = $null
$Fullarray = $null
$Finalvariable = $null
$Thirdallvars = $null


<#
for ($j=0; $j -lt $Allvars.length; $j += 1){

Invoke-expression $Allvars[$j]

}
#>


## ='.......   -replace "='.......", ";"

#$FinalArray = $newarray -replace "='.......", "+" ## this is too many, some variables are four or 3 characters

#$NewFinalArray = $FinalArray -replace "='.'.", ""
#return $NewFinalArray


#$CombinedAll = $NewFinalArray



## Combine all variables into final string:
# $Finalstring = $UVmYZ+$WXdw+$IJKLST+$rwST+$UVGHCD+$fSTq+$erl+$KLaf
# invoke-expression $Finalstring





## Newest issue:
# When we have a 23 character string, for example, our logic tries to create a substring at index 20 with length 5, which throws an error

## IDEAS:
# Implement switch case functionality instead of if/else
# Can easily then manually handle all string length differences with modulus math to cover anything between divisble numbers of 1-5
